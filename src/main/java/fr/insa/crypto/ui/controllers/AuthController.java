package fr.insa.crypto.ui.controllers;

import fr.insa.crypto.MainUI;
import fr.insa.crypto.trustAuthority.AccountStatus;
import fr.insa.crypto.trustAuthority.TrustAuthorityClient;
import fr.insa.crypto.ui.ViewManager;
import fr.insa.crypto.utils.Logger;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

import java.io.ByteArrayInputStream;
import java.util.Base64;

/**
 * Controller for the authentication and 2FA registration screen
 */
public class AuthController {
    // Reference to main application and view manager
    private MainUI mainApp;
    private ViewManager viewManager;

    // Trust authority client
    private TrustAuthorityClient trustClient;

    // Current state
    private String currentEmail;
    private String totpSecret;

    // UI components
    @FXML
    private VBox mainPanel;
    @FXML
    private VBox registerPanel;
    @FXML
    private VBox otpPanel;
    @FXML
    private VBox totpSetupPanel;
    @FXML
    private StackPane loadingOverlay;

    @FXML
    private Label emailDisplay;
    @FXML
    private TextField totpCodeField;
    @FXML
    private Button verifyTotpButton;
    @FXML
    private Button registerButton;
    @FXML
    private Text mainInfoText;

    @FXML
    private TextField registerEmailField;
    @FXML
    private Button sendOtpButton;
    @FXML
    private Button backToLoginButton;

    @FXML
    private Text otpInfoText;
    @FXML
    private TextField otpField;
    @FXML
    private Button verifyOtpButton;
    @FXML
    private Button resendOtpButton;

    @FXML
    private ImageView qrCodeImageView;
    @FXML
    private Text manualCodeText;
    @FXML
    private TextField setupTotpField;
    @FXML
    private Button confirmSetupButton;

    @FXML
    private Label loadingText;

    /**
     * Initializes the controller after FXML is loaded
     */
    @FXML
    private void initialize() {
        // Main panel buttons
        verifyTotpButton.setOnAction(event -> verifyTotpCode());
        registerButton.setOnAction(event -> showRegisterPanel());

        // Registration panel buttons
        sendOtpButton.setOnAction(event -> sendOtp());
        backToLoginButton.setOnAction(event -> showMainPanel());

        // OTP panel buttons
        verifyOtpButton.setOnAction(event -> verifyOtp());
        resendOtpButton.setOnAction(event -> sendOtp());

        // TOTP setup panel buttons
        confirmSetupButton.setOnAction(event -> confirmTotpSetup());
    }

    /**
     * Sets the main application and configures the controller
     * 
     * @param mainApp     Reference to the main application
     * @param viewManager Reference to the view manager
     * @param trustClient Trust authority client
     */
    public void setup(MainUI mainApp, ViewManager viewManager, TrustAuthorityClient trustClient) {
        this.mainApp = mainApp;
        this.viewManager = viewManager;
        this.trustClient = trustClient;
    }

    /**
     * Starts the authentication process for a user
     * 
     * @param email User's email
     */
    public void startAuthProcess(String email) {
        currentEmail = email;

        // Check if the user has an account
        showLoading("Verifying account...");

        Task<AccountStatus> checkTask = new Task<AccountStatus>() {
            @Override
            protected AccountStatus call() throws Exception {
                return trustClient.checkAccountStatus(email);
            }
        };

        checkTask.setOnSucceeded(e -> {
            hideLoading();
            AccountStatus status = checkTask.getValue();

            if (status.exists() && status.isVerified()) {
                // User has a verified account, show TOTP authentication screen
                showTotpVerificationPanel(email);
            } else {
                // User doesn't have an account or is not verified, show registration screen
                showRegisterPanel();
            }
        });

        checkTask.setOnFailed(e -> {
            hideLoading();
            Logger.error("Error checking account: " + checkTask.getException().getMessage());
            viewManager.showErrorAlert("Account Check Error",
                    "Unable to verify account status: " + checkTask.getException().getMessage());
            showRegisterPanel(); // Default to account creation
        });

        new Thread(checkTask).start();
    }

    /**
     * Verifies the TOTP code entered by the user
     */
    private void verifyTotpCode() {
        String totpCode = totpCodeField.getText().trim();

        if (totpCode.isEmpty()) {
            viewManager.showErrorAlert("Missing Code", "Please enter the code generated by Google Authenticator.");
            return;
        }

        showLoading("Verifying code...");

        Task<Boolean> verifyTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                return trustClient.verifyTOTP(currentEmail, totpCode);
            }
        };

        verifyTask.setOnSucceeded(e -> {
            hideLoading();
            boolean isValid = verifyTask.getValue();

            if (isValid) {
                // Valid code, continue with main authentication process
                mainApp.completeAuthentication(currentEmail, totpCode);
            } else {
                viewManager.showErrorAlert("Incorrect Code", "The code you entered is incorrect. Please try again.");
                totpCodeField.clear();
                totpCodeField.requestFocus();
            }
        });

        verifyTask.setOnFailed(e -> {
            hideLoading();
            Logger.error("Error verifying code: " + verifyTask.getException().getMessage());
            viewManager.showErrorAlert("Verification Error",
                    "Unable to verify code: " + verifyTask.getException().getMessage());
        });

        new Thread(verifyTask).start();
    }

    /**
     * Sends an OTP to the email address for registration
     */
    private void sendOtp() {
        String email = currentEmail;

        // If we're in the registration panel, use the entered email
        if (registerPanel.isVisible()) {
            email = registerEmailField.getText().trim();
            if (email.isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
                viewManager.showErrorAlert("Invalid Email", "Please enter a valid email address.");
                return;
            }
            currentEmail = email;
        }

        final String finalEmail = email;
        showLoading("Sending verification code...");

        Task<Boolean> otpTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                return trustClient.requestRegistration(finalEmail);
            }
        };

        otpTask.setOnSucceeded(e -> {
            hideLoading();
            boolean success = otpTask.getValue();

            if (success) {
                // Show OTP input panel
                showOtpVerificationPanel(finalEmail);
            } else {
                viewManager.showErrorAlert("Send Error",
                        "Unable to send verification code. Please try again.");
            }
        });

        otpTask.setOnFailed(e -> {
            hideLoading();
            Logger.error("Error sending OTP: " + otpTask.getException().getMessage());
            viewManager.showErrorAlert("Send Error",
                    "Unable to send verification code: " + otpTask.getException().getMessage());
        });

        new Thread(otpTask).start();
    }

    /**
     * Verifies the OTP code entered by the user
     */
    private void verifyOtp() {
        String otp = otpField.getText().trim();

        if (otp.isEmpty()) {
            viewManager.showErrorAlert("Missing Code", "Please enter the verification code received by email.");
            return;
        }

        showLoading("Verifying code...");

        Task<String> verifyTask = new Task<String>() {
            @Override
            protected String call() throws Exception {
                return trustClient.verifyOtpAndSetupTOTP(currentEmail, otp);
            }
        };

        verifyTask.setOnSucceeded(e -> {
            hideLoading();
            String qrCodeUri = verifyTask.getValue();

            if (qrCodeUri != null) {
                // Show QR code for Google Authenticator
                showTotpSetupPanel(qrCodeUri);
            } else {
                viewManager.showErrorAlert("Incorrect Code",
                        "The verification code is incorrect or expired. Please try again.");
                otpField.clear();
                otpField.requestFocus();
            }
        });

        verifyTask.setOnFailed(e -> {
            hideLoading();
            Logger.error("Error verifying OTP: " + verifyTask.getException().getMessage());
            viewManager.showErrorAlert("Verification Error",
                    "Unable to verify code: " + verifyTask.getException().getMessage());
        });

        new Thread(verifyTask).start();
    }

    /**
     * Confirms TOTP setup (Google Authenticator)
     */
    private void confirmTotpSetup() {
        String code = setupTotpField.getText().trim();

        if (code.isEmpty()) {
            viewManager.showErrorAlert("Missing Code", "Please enter the code generated by Google Authenticator.");
            return;
        }

        showLoading("Verifying code...");

        Task<Boolean> verifyTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                return trustClient.verifyTOTP(currentEmail, code);
            }
        };

        verifyTask.setOnSucceeded(e -> {
            hideLoading();
            boolean isValid = verifyTask.getValue();

            if (isValid) {
                viewManager.showInfoAlert("Setup Successful",
                        "Your account has been set up successfully. You can now log in.");
                // Go back to TOTP authentication screen
                showTotpVerificationPanel(currentEmail);
            } else {
                viewManager.showErrorAlert("Incorrect Code", "The code you entered is incorrect. Please try again.");
                setupTotpField.clear();
                setupTotpField.requestFocus();
            }
        });

        verifyTask.setOnFailed(e -> {
            hideLoading();
            Logger.error("Error verifying TOTP: " + verifyTask.getException().getMessage());
            viewManager.showErrorAlert("Verification Error",
                    "Unable to verify code: " + verifyTask.getException().getMessage());
        });

        new Thread(verifyTask).start();
    }

    /**
     * Shows the main panel with TOTP verification
     */
    private void showTotpVerificationPanel(String email) {
        mainPanel.setVisible(true);
        registerPanel.setVisible(false);
        otpPanel.setVisible(false);
        totpSetupPanel.setVisible(false);

        emailDisplay.setText(email);
        mainInfoText.setText("Please enter the 6-digit code generated by Google Authenticator");
        totpCodeField.clear();
        totpCodeField.requestFocus();
    }

    /**
     * Shows the registration panel (step 1)
     */
    private void showRegisterPanel() {
        mainPanel.setVisible(false);
        registerPanel.setVisible(true);
        otpPanel.setVisible(false);
        totpSetupPanel.setVisible(false);

        registerEmailField.setText(currentEmail);
        registerEmailField.requestFocus();
    }

    /**
     * Shows the OTP verification panel (step 2)
     */
    private void showOtpVerificationPanel(String email) {
        mainPanel.setVisible(false);
        registerPanel.setVisible(false);
        otpPanel.setVisible(true);
        totpSetupPanel.setVisible(false);

        otpInfoText.setText("Please enter the verification code sent to " + email);
        otpField.clear();
        otpField.requestFocus();
    }

    /**
     * Shows the TOTP setup panel (step 3)
     */
    private void showTotpSetupPanel(String qrCodeUri) {
        mainPanel.setVisible(false);
        registerPanel.setVisible(false);
        otpPanel.setVisible(false);
        totpSetupPanel.setVisible(true);

        // Extract TOTP secret from URI (format data:image/png;base64,...)
        if (qrCodeUri.startsWith("data:image/png;base64,")) {
            String base64Image = qrCodeUri.substring("data:image/png;base64,".length());
            try {
                byte[] imageData = Base64.getDecoder().decode(base64Image);
                Image qrCodeImage = new Image(new ByteArrayInputStream(imageData));
                qrCodeImageView.setImage(qrCodeImage);

                // Get TOTP secret from client
                this.totpSecret = trustClient.getTotpSecret();
                if (this.totpSecret != null) {
                    manualCodeText.setText(this.totpSecret);
                } else {
                    manualCodeText.setText("(Secret not available)");
                }
            } catch (Exception ex) {
                Logger.error("Error decoding QR code: " + ex.getMessage());
                qrCodeImageView.setImage(null);
                manualCodeText.setText("(Decoding error)");
            }
        } else {
            Logger.error("Unsupported QR code format: " + qrCodeUri);
        }

        setupTotpField.clear();
        setupTotpField.requestFocus();
    }

    /**
     * Shows the main panel
     */
    private void showMainPanel() {
        mainPanel.setVisible(true);
        registerPanel.setVisible(false);
        otpPanel.setVisible(false);
        totpSetupPanel.setVisible(false);
    }

    /**
     * Shows the loading overlay with a message
     */
    private void showLoading(String message) {
        loadingText.setText(message);
        loadingOverlay.setVisible(true);
    }

    /**
     * Hides the loading overlay
     */
    private void hideLoading() {
        loadingOverlay.setVisible(false);
    }
}
